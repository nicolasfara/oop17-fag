plugins {
    id 'java'
    id 'idea'
    id 'pmd'
    id 'checkstyle'
    id "com.github.spotbugs" version "1.6.2"
    id 'jacoco'
}

import com.github.spotbugs.SpotBugsTask

group 'goffo'
version '0.1.0'

sourceCompatibility = 9

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'com.github.almasb:fxgl:0.5.3'
    // SpotBugs
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

//PMD rules (More rigid rules)
pmd {
    toolVersion = '6.6.0'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-junit',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

//FindBugs setup
spotbugs {
    toolVersion = '3.1.3'
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

//CheckStyle setup
checkstyle {
    toolVersion '8.10.1'
    configFile file("$project.rootDir/plugins/style.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
        html.stylesheet resources.text.fromFile("$project.rootDir/plugins/checkstyle-css.xsl")
    }
}

//JaCoCo
jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'it.unibo.goffo.fag.FightAvengeGuerrillaApp'
    }
    baseName = project.name + '-goffo'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
